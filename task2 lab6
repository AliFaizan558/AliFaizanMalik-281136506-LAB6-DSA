#TASK 2
from node import Node
class SinglyLinkedList:
    def __init__(self):
        self.head = None
    def is_empty(self):
        return self.head is None
    def append(self, data):
        new_node = Node(data)
        if self.is_empty():
            self.head = new_node
        else:
            c_node = self.head
            while c_node.next:
                c_node = c_node.next
            c_node.next = new_node
    def insert(self, index, data):
        if index < 0:
            print ("Index can't be negative")
            return
        new_node = Node(data)
        if index == 0:
            new_node.next = self.head
            self.head = new_node
            return
        c_node = self.head
        pos = 0
        while c_node and pos < index - 1:
            c_node = c_node.next
            pos += 1
        if c_node is None:
            print ("Index out of bounds")
            return
        new_node.next = c_node.next
        c_node.next = new_node
    def pop(self, index=None):
        if self.is_empty():
            print("List already empty")
            return
        if index is None:
            c_node = self.head
            prev = None
            while c_node.next:
                prev = c_node
                c_node = c_node.next
            print(f"Node removed: {c_node.data}")
            if prev:
                prev.next = None
            else:
                self.head = None
            return
        if index < 0:
            print ("Index can't be negative")
            return
        c_node = self.head
        if index == 0:
            print(f"Node removed: {self.head.data}")
            self.head = self.head.next
            return
    def search(self, data):
        c_node = self.head
        index = 0
        while c_node:
            if c_node.data == data:
                return index
            c_node = c_node.next
            index += 1
        return -1
    def display(self):
        if self.is_empty():
            print("List is empty.")
            return
        c_node = self.head
        while c_node:
            print(c_node.data, end=" -> ")
            c_node = c_node.next
        print("None")
if __name__ == "__main__":
# Create linked list object
    linked_list = SinglyLinkedList()
    # TODO: Test your implementation below:
    # Example operations:
    linked_list.append(10)
    linked_list.append(20)
    linked_list.append(30)
    linked_list.display()
    linked_list.insert(1, 15)
    linked_list.display()
    linked_list.pop()
    linked_list.display()
    linked_list.pop(0)
    linked_list.display()
    pos = linked_list.search(20)
    print("Found at index:", pos)
        

